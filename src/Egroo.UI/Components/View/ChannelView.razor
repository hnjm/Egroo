@using BlazorDexie.JsModule
@using Microsoft.AspNetCore.SignalR.Client
@using jihadkhawaja.chat.client
@using jihadkhawaja.chat.client.CacheDB
@using jihadkhawaja.chat.client.Core
@using jihadkhawaja.chat.client.Services

@inject SessionStorage SessionStorage
@inject StorageService StorageService
@inject IChatUser ChatUserService
@inject IChatMessage ChatMessageService
@inject IJSRuntime JSRuntime

<MudContainer MaxWidth="MaxWidth.Large" Class="my-4 pt-4">
    <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.FlexStart" Class="mb-2">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Size="Size.Large" Link="/channels" />
        <MudText Typo="Typo.h6" GutterBottom>@Title</MudText>
    </MudStack>

    @if (!IsLoading)
    {
        <MudStack>
            <MudPaper id="messages-container" Elevation="0" Class="pa-4"
                Style="height: calc(100vh - 280px); overflow-x:hidden;overflow-y:auto;">
                @if (Messages.Count() == 0)
                {
                    <MudText>No Messages</MudText>
                }
                else
                {
                    <MudStack>
                        @foreach (var message in Messages)
                        {
                            @if (message.DateCreated.Value.ToLocalTime().Date == DateTime.Today)
                            {
                                <MessageView DisplayName="@message.DisplayName" Content="@message.Content" 
                                Date="@message.DateCreated.Value.ToLocalTime().ToString("h:mm tt")"
                                             IsCurrentUser="@IsCurrentUserMessage(message.SenderId)"
                                             SentOnDate="@message.DateSent" SeenOnDate="@message.DateSeen" />
                            }
                            else if (message.DateCreated.Value.ToLocalTime().Date >= DateTime.Today.AddDays(-6))
                            {
                                <MessageView DisplayName="@message.DisplayName" Content="@message.Content" 
                                Date="@message.DateCreated.Value.ToLocalTime().ToString("ddd, h:mm tt")"
                                             IsCurrentUser="@IsCurrentUserMessage(message.SenderId)"
                                             SentOnDate="@message.DateSent" SeenOnDate="@message.DateSeen" />
                            }
                            else
                            {
                                <MessageView DisplayName="@message.DisplayName" Content="@message.Content" 
                                Date="@message.DateCreated.Value.ToLocalTime().ToString("dd/MM/yyyy h:mm tt")"
                                             IsCurrentUser="@IsCurrentUserMessage(message.SenderId)"
                                             SentOnDate="@message.DateSent" SeenOnDate="@message.DateSeen" />
                            }
                        }
                    </MudStack>
                }
            </MudPaper>
            <MudStack Row>
                <MudTextField @ref="inputMudTextField" DisableUnderLine
                          Value="InputContent"
                          ValueChanged="@((string s) => OnInputContent(s))" Immediate="true"
                          InputMode="InputMode.text" InputType="InputType.Text"
                          AutoFocus="true"
                          Label="Your message here" Variant="Variant.Filled" @onkeydown="@EnterPressed"
                          Lines="1" MaxLength="MaxMessageLength"
                          Counter="MaxMessageLength" />
                <MudIconButton Icon="@Icons.Material.Filled.Send" Variant="Variant.Filled"
                                  DisableElevation Class="mt-1 mb-6"
                           OnClick="SendMessage" ButtonType="ButtonType.Submit" />
            </MudStack>
        </MudStack>
    }
    else
    {
        <div style="width:100%;height:100%;text-align:center;">
            <MudProgressCircular Indeterminate Size="Size.Medium" />
        </div>
    }
</MudContainer>

@code {
    [Inject] ISnackbar Snackbar { get; set; } = null!;

    [Parameter]
    public string? Title { get; set; }
    [Parameter]
    public string? ChannelId { get; set; }

    private List<Message> Messages { get; set; } = new();
    private bool IsLoading { get; set; } = true;

    MudTextField<string> inputMudTextField { get; set; } = null!;
    private string? InputContent { get; set; }
    private int MessageLinesCount { get; set; }
    private int MaxMessageLength { get; set; } = 300;

    private EgrooDB? CacheDB { get; set; }

    protected override async Task OnInitializedAsync()
    {
        HubEvents();

        var moduleFactory = new EsModuleFactory(JSRuntime);
        CacheDB = new EgrooDB(moduleFactory);

        // await CacheDB.Messages.BulkPut(new Message[]
        // {
        //     new Message()
        //     {
        //         ChannelId = GetChannelId(),
        //         DisplayName = await ChatUserService.GetUserUsername(SessionStorage.User.Id),
        //         Content = "Test",
        //         SenderId = SessionStorage.User.Id,
        //     },
        // });

        Messages = await CacheDB.Messages.Where(nameof(Message.ChannelId)).IsEqual(GetChannelId()).Limit(50).SortByToList(nameof(Message.DateCreated));

        IsLoading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InvokeAsync(StateHasChanged);

            ScrollToMessagesEnd();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private Guid GetChannelId()
    {
        Guid id;
        if (Guid.TryParse(ChannelId, out id))
        {
            return id;
        }

        return Guid.Empty;
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrEmpty(InputContent) || string.IsNullOrWhiteSpace(InputContent))
        {
            return;
        }

        InputContent = InputContent.Trim();

        Message message = new()
        {
            ChannelId = GetChannelId(),
            DisplayName = await ChatUserService.GetUserUsername(SessionStorage.User.Id),
            Content = InputContent,
            SenderId = SessionStorage.User.Id,
        };

        if (await ChatMessageService.SendMessage(message))
        {
            InputContent = string.Empty;
            await inputMudTextField.Clear();

            await InvokeAsync(StateHasChanged);
        }
        else
        {
            Snackbar.Add("Failed to send message, Please check your connection and try again", MudBlazor.Severity.Error);
        }
    }

    public async Task EnterPressed(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await Task.Delay(150);

            await SendMessage();
        }
    }

    private async Task<string> GetUserName(Guid userid)
    {
        return await ChatUserService.GetUserUsername(userid);
    }

    private void ScrollToMessagesEnd()
    {
        JSRuntime.InvokeVoidAsync("scrollToEnd", "messages-container");
    }

    private bool IsCurrentUserMessage(Guid senderid)
    {
        if (senderid == SessionStorage.User.Id)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    private void OnInputContent(string text)
    {
        InputContent = text;
    }

    private void HubEvents()
    {
        MobileChatSignalR.HubConnection?.On<Message>("ReceiveMessage", async message =>
        {
            if (message.ChannelId != GetChannelId())
            {
                return;
            }

            message.DisplayName = await GetUserName(message.SenderId);

            Messages.Add(message);

            await InvokeAsync(StateHasChanged);

            if (message.DateSeen is null && message.SenderId != SessionStorage.User.Id)
            {
                await ChatMessageService.SetMessageAsSeen(message.Id);
            }

            await CacheDB.Messages.Add(message);

            ScrollToMessagesEnd();
        });

        MobileChatSignalR.HubConnection?.On<Message>("UpdateMessage", async message =>
        {
            if (message.ChannelId != GetChannelId())
            {
                return;
            }

            int index = Messages.IndexOf(message);
            Messages[index] = message;

            await CacheDB.Messages.Add(message);

            await InvokeAsync(StateHasChanged);
        });
    }
}
